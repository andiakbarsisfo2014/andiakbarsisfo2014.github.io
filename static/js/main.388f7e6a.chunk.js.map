{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","sendMessage","a","Object","from","state","message","universalRedux","socket","emit","data","value","setState","isActive","messageList","this","window","prompt","on","e","navigator","serviceWorker","controller","postMessage","type","ready","then","addEventListener","console","log","className","style","backgroundColor","padding","height","paddingRight","to","onClick","path","map","key","index","onChange","target","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","catch","error","io","store","createStore","combineReducers","action","testingPus","MainPage","connect","manageUser","sw","pushManager","getSubscription","sb","id","ReactDOM","render","StrictMode","document","getElementById","Notification","permission","requestPermission","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","param","dispatch"],"mappings":"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","file":"static/js/main.388f7e6a.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport {\n    BrowserRouter as Router,\n    // Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\n  export default class App extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            isActive: '/message',\n            messageList: [],\n            message: '',\n            from: '',\n        }\n    }\n\n    componentDidMount() {\n        this.setState({from: window.prompt(\"Nama ta ye' \")})\n        // var broadCast = new BroadcastChannel('useless-recived');\n        // broadCast.addEventListener('message', (event) => {\n        //     this.setState({messageList: [...this.state.messageList, event.data.data], message: ''})\n        // })\n        this.props.universalRedux.socket.on('recived-message', (e) => {\n            navigator.serviceWorker.controller.postMessage({type: 'sendMessage', value: e.value});\n        });\n        navigator.serviceWorker.ready.then((e) => {\n            navigator.serviceWorker.addEventListener('message', (e) => {\n                console.log(e.data.value);\n                this.setState({messageList: [...this.state.messageList, e.data.value],})\n            })\n        })\n\n        \n\n    }\n\n    sendMessage =()=> {\n        var a = new Object();\n        a.from = this.state.from;\n        a.message = this.state.message\n        // var broadCast = new BroadcastChannel('useless-send');\n        // broadCast.postMessage({data: a, type: 'sendMessage'});\n        // navigator.serviceWorker.controller.postMessage({data: a, type: 'sendMessage'});\n        this.props.universalRedux.socket.emit('send-message', {data: a, value: a});\n        this.setState({message: ''});\n    }\n\n    render () {\n\n        return (\n            <Router>\n            <nav className=\"navbar\" style={{backgroundColor: '#075E54', padding: '.5rem'}}>\n                <div className=\"col-10 col-md-10\">\n                    <div className=\"navbar-brand\">\n                    WhatsApp\n                    </div>\n                    {/* <a className=\"navbar-brand\" >\n                        WhatsApp\n                    </a> */}\n                </div>\n                <div className=\"col-2 col-md-2 text-right\">\n                    \n                    {/* <a className=\"myLink\">\n                        :\n                    </a>\n                    <a className=\"myLink\">\n                        :\n                    </a> */}\n                </div>\n            </nav>\n            <ul className=\"nav justify-content-center\" style={{backgroundColor: '#075E54', height: 50, paddingRight: 6}}>\n                <li className={this.state.isActive === '/cam' ? 'nav-item col-2 col-sm-2 text-center active' : 'nav-item col-3 col-sm-3 text-center'} >\n                    <Link to=\"cam\" className=\"nav-link text-center\" onClick={()=>this.setState({isActive: '/cam'})}>CM</Link>\n                </li>\n                <li className={this.state.isActive === '/message' ? 'nav-item col-3 col-sm-3 text-center active' : 'nav-item col-3 col-sm-3 text-center'} >\n                    <Link to=\"message\" className=\"nav-link text-center\" onClick={()=>this.setState({isActive: '/message'})}>Message</Link>\n                </li>\n                <li className={this.state.isActive === '/status' ? 'nav-item col-3 col-sm-3 text-center active' : 'nav-item col-3 col-sm-3 text-center'}>\n                    <Link to=\"status\" className=\"nav-link text-center\" onClick={()=>this.setState({isActive: '/status'})}>Status</Link>\n                </li>\n                <li className={this.state.isActive === '/calls' ? 'nav-item col-3 col-sm-3 text-center active' : 'nav-item col-3 col-sm-3 text-center'}>\n                    <Link to=\"calls\" className=\"nav-link text-center\" onClick={()=>this.setState({isActive: '/calls'})}>Calls</Link>\n                </li>\n            </ul>\n            <Route path=\"*\">\n                <div className=\"container\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <div className=\"form-group row\">\n                                <div className=\"col-12\">\n                                    {\n                                        this.state.messageList.map((key, index) => {\n                                            return (\n                                                <div className=\"card\" key={index}>\n                                                    <div className=\"card-header\">\n                                                        {key.from}: {key.message}\n                                                    </div>\n                                                </div>\n                                            )\n                                        })\n                                    }\n                                \n                                </div>\n                            </div>\n                            <div className=\"form-group row\">\n                                <div className=\"col-8\">\n                                    <input type=\"text\" onChange={(e) => this.setState({message: e.target.value})} className=\"form-control\" value={this.state.message} />\n                                </div>\n                                <div className=\"col-2\">\n                                    <button type=\"button\" onClick={()=>this.sendMessage()} className=\"btn btn-success\">Send</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Route>\n            </Router>\n        )\n    }\n}\n","\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    \n    if ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    \n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n                navigator.serviceWorker.ready.then(() => {});\n            } \n            else {\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker.register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        }\n                        else {\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                }       ;\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n    .then(response => {\n        const contentType = response.headers.get('content-type');\n        if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n            navigator.serviceWorker.ready.then(registration => {\n                registration.unregister().then(() => {\n                    window.location.reload();\n                });\n            });\n        } \n        else {\n            registerValidSW(swUrl, config);\n        }\n    })\n    .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        })\n        .catch(error => {\n            console.error(error.message);\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, combineReducers } from 'redux';\nimport io from 'socket.io-client';\n// const link = 'http://localhost:8000';\nconst linkOnline = 'https://tajwid-socket.herokuapp.com';\nconst socket = io(linkOnline);\nsocket.on('connected', (a) => {\n    console.log(a);\n})\n\nfunction universalRedux(state, action) {\n    if (typeof state === 'undefined') {\n        return {\n            testingPus: {},\n            socket: socket,\n        }\n    }\n    else if(action.type === 'push') {\n        return {\n            ...state, \n            testingPus: action.data,\n            socket: socket,\n        }\n    }\n    else {\n        return state\n    }\n}\n\n\n\nlet store = createStore(combineReducers({universalRedux: universalRedux}));\nconst MainPage = connect(state => ({universalRedux: state.universalRedux}))(App);\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <MainPage />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nif (Notification.permission !== 'granted') {\n    Notification.requestPermission();   \n}\n\nfunction manageUser() {\n    navigator.serviceWorker.ready.then(sw => {\n        return sw.pushManager.getSubscription();\n    })\n    .then(sb => {\n        if (sb) {\n            navigator.serviceWorker.controller.postMessage({type: 'setId', data: {id: 'new-id'}})\n        }\n    })\n}\n\nfunction onUpdate(param) {\n    store.dispatch({type: 'push', data: param})\n    manageUser()\n}\nfunction onSuccess(param) {\n    manageUser()\n    store.dispatch({type: 'push', data: param})\n}\n\nserviceWorker.register({onSuccess: onSuccess, onUpdate: onUpdate});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n\n"],"sourceRoot":""}